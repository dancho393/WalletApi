
How to Run

Follow these steps to set up and run the project:

   1. Download IntelliJ IDEA
      Ensure you have IntelliJ IDEA installed on your system. You can download it from JetBrains' official website.
      https://www.jetbrains.com/idea/download/?section=windows

    2. Clone the Repository
       Clone the project to your local machine using the following GitHub link:
       git clone https://github.com/dancho393/WalletApi

    3.Build the Project with Maven
       Navigate to the project directory and run:
       
       mvn clean install

    4.Download Docker Desktop
       Install Docker Desktop from Docker's official website and ensure it is running.
       https://www.docker.com/products/docker-desktop/
   
    5.Build the Docker Containers
       Navigate to the project directory and execute the following command:
      
       docker-compose build
   
    6.Start the Docker Containers
       Run the following command to start the containers:
      
       docker-compose up
   
   7. Access the API Documentation
      Once the application is running, open your browser and go to:
      http://localhost:8080/swagger-ui/index.html
   
      Here, you can test the available API endpoints.
      
      Important:
   
       First, register using the Register endpoint.
       After successful registration, log in with the same profile using the Login endpoint.
       Copy the JWT token from the login response.
       Paste the token into the Authorize field in the Swagger UI.
   
      Note: The waller endpoints require authentication because Spring Security is enabled.

Technologies Used

    Java:  For backend development.
    Spring Boot: For RESTful API creation.
    Maven: Build automation and dependency management.
    Docker: Containerization for consistent environment setup.
    Swagger: API documentation and testing interface.
    PostgreSQL: Database for storing application data.

Project Structure

The project follows a modular structure with packages designed for specific purposes:

    api:
       Provides request/response objects and defines operation interfaces for abstraction,
       ensuring separation of concerns and flexibility in extending the application.

    config:
       Contains the configuration files for the application,
       including security, database, and other environment-specific setups.

    controller:
       Hosts the controllers that expose RESTful endpoints for the API.
       This is where the client requests are handled and forwarded to the service layer.

    exception:
       Includes custom exception classes to handle errors gracefully 
       and provide meaningful error responses to the client.

    model:
       Represents the database entities. 
       These are the Java classes annotated with JPA annotations to map to database tables.

    repo:
    Contains the repository interfaces responsible 
    for data manipulation and interaction with the database. Spring Data JPA is used for efficient CRUD operations.

    service:
       Houses the business logic of the application. 
       This layer processes requests from the controllers, interacts with the repository layer, and implements the core functionality of the API.
